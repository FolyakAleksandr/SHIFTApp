import CoreData
import UIKit

// MARK: - Protocol

protocol CoreDataManagerProtocol {
    func saveUser(_ firstName: String, _ lastName: String, _ password: String)
    func fetchUser() -> UserModel?
    func deleteUser()
}

// MARK: - CoreDataManager

final class CoreDataUserStorage: CoreDataManagerProtocol {
    static let shared = CoreDataUserStorage()

    // MARK: - Core Data Stack

    private let backgroundContext: NSManagedObjectContext = CoreDataStack.shared.backgroundContext

    private init() {}

    // MARK: - Save

    func saveUser(_ firstName: String, _ lastName: String, _ password: String) {
        let user = UserEntity(context: backgroundContext)
        user.id = UUID()
        user.firstName = firstName
        user.lastName = lastName
        user.password = password

        do {
            try backgroundContext.save()
            print("‚úÖ User saved")
        } catch {
            print("üö´ Failed save")
        }
    }

    func fetchUser() -> UserModel? {
        let request: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()

        do {
            if let user = try backgroundContext.fetch(request).first {
                return UserModel(from: user)
            }
        } catch {
            print("üö´ Failed to fetch user: \(error.localizedDescription)")
        }
        return nil
    }

    // MARK: - Delete

    /// –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –∏–¥–µ—è - —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞–∑–ª–æ–≥–∏–Ω. –ú–æ–∂–µ—Ç, –∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ?
    /// –ê —Ç–æ –∫–∞–∫ —Ç–æ –∂–µ—Å—Ç–∫–æ –≤—ã—Ö–æ–¥–∏—Ç—å
    /// –£ —Ç–µ–±—è –∫–∞–∫ —Ä–∞–∑ –µ—Å—Ç—å –ø–æ–ª–µ —Å –∞–π–¥–∏—à–Ω–∏–∫–∞–º–∏.
    /// –ï—â–µ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ–ª–µ CurrentlyInUse: Bool - –µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –ª–µ–∂–∞—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π, —Ç–æ –º—ã –±—É–¥–µ–º –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π —Å–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–± —É–¥–∞–ª–∏—Ç—å –µ–≥–æ
    func deleteUser() {
        let request: NSFetchRequest<UserEntity> = UserEntity.fetchRequest()

        do {
            let users = try backgroundContext.fetch(request)
            for user in users {
                backgroundContext.delete(user)
            }
            try backgroundContext.save()
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \(error)")
        }
    }
}
